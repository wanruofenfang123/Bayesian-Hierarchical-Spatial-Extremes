hist(xi.df$shape,xlab=expression(xi),main="Histogram of cluster means of shape GMLEs")
par(mfrow=c(1,1),mgp=c(1.5,1,0))
hist(xi.df$shape,xlab=expression(xi),main="Histogram of cluster means of shape GMLEs")
par(mfrow=c(1,1),mgp=c(2,0.5,0))
hist(xi.df$shape,xlab=expression(xi),main="Histogram of cluster means of shape GMLEs")
p200_95 = ggplot(xi.df, aes(x = lon, y = lat)) +
geom_point(aes(colour = shape), size=0.5, stroke = 0, shape=15) +
scale_color_gradient2(midpoint = 0, low = "blue", mid = "white", high = "red", space = "Lab" ) +
coord_map() + ggtitle("(a) Cluster means of shape GMLEs") + theme(legend.key.size = unit(0.4, "cm"), legend.text = element_text(size = 10), axis.title = element_text(size=10),legend.title = element_text(size=10),title = element_text(size=10))
p200_95
hist <- ggplot(xi.df$shape) + geom_histogram(binwidth = 0.5)
hist <- ggplot(xi.df) + geom_histogram(binwidth = 0.5)
hist
hist <- ggplot(xi.df, aes(x=shape)) + geom_histogram(binwidth = 0.5)
hist
hist <- ggplot(xi.df, aes(x=shape)) + geom_histogram()
hist
hist <- ggplot(xi.df, aes(x=shape)) + geom_histogram(color="black", fill="white")
hist
hist <- ggplot(xi.df, aes(x=shape)) + geom_histogram(color="black", fill="white")+ggtitle(xlab=expression(xi))
hist <- ggplot(xi.df, aes(x=shape)) + geom_histogram(color="black", fill="white")+ggtitle(expression(xi))
hist
hist <- ggplot(xi.df, aes(x=shape)) + geom_histogram(color="black", fill="white")+xlab(expression(xi))
hist
hist <- ggplot(xi.df, aes(x=shape)) + geom_histogram(color="black", fill="white")+ xlab(expression(xi)) + ylab("Frequency") + ggtitle("(b) Histogram of cluster means of shape GMLEs")
hist
ggpubr::ggarrange(p200_95,hist)
ggpubr::ggarrange(p200_95,hist,widths=c(1.5,1))
ggpubr::ggarrange(p200_95,hist,widths=c(1.5,1),heights=c(1.5,1))
ggpubr::ggarrange(p200_95,hist,heights=c(1.5,1))
ggpubr::ggarrange(p200_95,hist,widths=c(2,1))
par(mfrow=c(1,1),mar=c(5,4,2,2),mgp=c(2,0.5,0))
ggpubr::ggarrange(p200_95,hist,widths=c(2,1))
ggpubr::ggarrange(hist,p200_95,widths=c(2,1))
ggpubr::ggarrange(hist,p200_95)
ggpubr::ggarrange(hist,p200_95,heights=c(1,1.5))
ggpubr::ggarrange(hist,p200_95,widths=c(1,1.5))
hist <- ggplot(xi.df, aes(x=shape)) + geom_histogram(color="black", fill="white")+ xlab(expression(xi)) + ylab("Frequency") + ggtitle(expression(paste("(a) Histogram of ", xi)))
hist
p200_95 = ggplot(xi.df, aes(x = lon, y = lat)) +
geom_point(aes(colour = shape), size=0.5, stroke = 0, shape=15) +
scale_color_gradient2(midpoint = 0, low = "blue", mid = "white", high = "red", space = "Lab" ) +
coord_map() + ggtitle("(b) Cluster means of shape GMLEs") + theme(legend.key.size = unit(0.4, "cm"), legend.text = element_text(size = 10), axis.title = element_text(size=10),legend.title = element_text(size=10),title = element_text(size=10))
ggpubr::ggarrange(hist,p200_95,widths=c(1,1.5))
ggpubr::ggarrange(hist,p200_95,widths=c(1,2))
ggpubr::ggarrange(hist,p200_95,widths=c(1,1.8))
ggpubr::ggarrange(hist,p200_95,widths=c(1,2))
hist <- ggplot(xi.df, aes(x=shape)) + geom_histogram(color="black", fill="white")+ xlab(expression(xi)) + ylab("Frequency") + ggtitle(expression(paste("(a) Histogram of ", xi)))+ theme(title = element_text(size=10))
ggpubr::ggarrange(hist,p200_95,widths=c(1,2))
ggpubr::ggarrange(hist,p200_95,widths=c(1,2))
ggpubr::ggarrange(hist,p200_95,widths=c(1,2.3))
ggpubr::ggarrange(hist,p200_95,widths=c(1,2))
ggpubr::ggarrange(hist,p200_95,widths=c(1,1.5),heights=c(1,1.5))
ggpubr::ggarrange(hist,p200_95,widths=c(1,1.5),heights=c(1,2.5))
ggpubr::ggarrange(hist,p200_95,heights=c(1,2.5))
ggpubr::ggarrange(hist,p200_95,widths=c(1,1.5),heights=c(1,3))
ggpubr::ggarrange(hist,p200_95,widths=c(1,1.5),align = "v")
ggpubr::ggarrange(hist,p200_95,align = "hv")
ggpubr::ggarrange(hist,p200_95,widths=c(1,1.5))
p200_95
hist
hist
hist
p200_95 = ggplot(xi.df, aes(x = lon, y = lat)) +
geom_point(aes(colour = shape), size=0.5, stroke = 0, shape=15) +
scale_color_gradient2(midpoint = 0, low = "blue", mid = "white", high = "red3", space = "Lab" ) +
coord_map() + ggtitle("(b) Cluster means of shape GMLEs") + theme(legend.key.size = unit(0.4, "cm"), legend.text = element_text(size = 10), axis.title = element_text(size=10),legend.title = element_text(size=10),title = element_text(size=10))
p200_95
hist <- ggplot(xi.df, aes(x=shape)) + geom_histogram(color="black", fill="white")+ xlab("shape") + ylab("Frequency") + ggtitle(expression(paste("(a) Histogram of shape GMLEs")))+ theme(title = element_text(size=10))
hist
hist
sa.regs = readRDS("SAU_adm1.rds")
state <- map_data("state")
ggplot(state)
ggplot(state,aes(x=long,y=lat))
ggplot(state,aes(x=long,y=lat)) + geom_polygon(fill="lightgray", colour = "white")
ggplot(state,aes(x=long,y=lat)) + geom_polygon(fill="lightgray")
ggplot(state,aes(x=long,y=lat,group=grouping)) + geom_polygon(fill="lightgray")
ggplot(state,aes(x=long,y=lat,group=group)) + geom_polygon(fill="lightgray")
library(ggmap)
register_google(key = 'AIzaSyA4oFotkdXIMAkxcS9F7sEw9faN93Wz2oA')
coord <- expand.grid(lon,lat)
df.na <- data.frame(lon = coord[,1], lat = coord[,2], prob=prob30)
df_prob <- df.na[!is.na(df.na$prob),]
prob9 <- readRDS("prob9.Rda")
df.ws.na <- data.frame(lon = coord[,1], lat = coord[,2], prob=prob9)
df_prob9 <- df.ws.na[!is.na(df.ws.na$prob),]
cell <- readRDS(here::here("Wind_140_KSA/cell.dat"))
ws_best <- ifelse(df_prob$prob<0.01 & df_prob9$prob>0.5,df_prob$prob,NA)
df_best <- data.frame(lon=cell[,"lon"],lat=cell[,"lat"],prob=ws_best)
df_best_pt <- df_best[!is.na(df_best$prob),]
dim(df_best_pt)
pars <- readRDS("pars_IAR_200_95.dat")
pars_ordered <- pars[order(pars[,1]),]
pars_ordered[,9] <- ifelse(is.na(pars_ordered[,9])==TRUE,0,pars_ordered[,9])
lon <- readRDS(here::here("Data/Preliminary data/lon_KSA"))
lat <- readRDS(here::here("Data/Preliminary data/lat_KSA"))
N <- length(lon)*length(lat)
pars_KSA <- cbind(c(1:N), rep(NA,N), rep(NA,N), rep(NA,N),rep(NA,N),rep(NA,N),rep(NA,N),rep(NA,N),rep(NA,N))
pars_KSA[which(pars_KSA[,1]%in%pars_ordered[,1]),] <- pars_ordered
mu_pmean <- pars_KSA[,2]
lsig_pmean <- pars_KSA[,3]
xi_pmean <- pars_KSA[,4]
ret30_pmean <- pars_KSA[,5]
ret30_50q <- pars_KSA[,6]
ret30_5q <- pars_KSA[,7]
ret30_95q <- pars_KSA[,8]
prob30 <- pars_KSA[,9]
library(ggmap)
register_google(key = 'AIzaSyA4oFotkdXIMAkxcS9F7sEw9faN93Wz2oA')
coord <- expand.grid(lon,lat)
df.na <- data.frame(lon = coord[,1], lat = coord[,2], prob=prob30)
df_prob <- df.na[!is.na(df.na$prob),]
prob9 <- readRDS("prob9.Rda")
df.ws.na <- data.frame(lon = coord[,1], lat = coord[,2], prob=prob9)
df_prob9 <- df.ws.na[!is.na(df.ws.na$prob),]
cell <- readRDS(here::here("Wind_140_KSA/cell.dat"))
#df_mws <- readRDS(here::here("Data/df_mws.Rda"))
#ws <- readRDS(here::here("Data/WS140_summer_mean.Rda"))
ws_good <- ifelse(df_prob$Prob<0.05 & df_prob9$Prob>0.5,df_prob$Prob,NA)
df_good <- data.frame(lon=cell[,"lon"],lat=cell[,"lat"],prob=ws_good)
ws_best <- ifelse(df_prob$prob<0.01 & df_prob9$prob>0.5,df_prob$prob,NA)
df_best <- data.frame(lon=cell[,"lon"],lat=cell[,"lat"],prob=ws_best)
df_best_pt <- df_best[!is.na(df_best$prob),]
dim(df_best_pt)
myLocation =  c(min(lon)-0.1, min(lat), max(lon)+0.1, max(lat))
#myLocation = c(lon = 45, lat = 25)
myMap <- get_map(location = myLocation, maptype = "terrain", source = "google")
f1 <- ggmap(myMap) + scale_x_continuous(limits = c(min(lon), max(lon)), expand = c(0, 0)) + scale_y_continuous(limits = c(min(lat), max(lat)), expand = c(0, 0)) +
geom_point(aes(x = lon, y = lat, color=Prob), data = df_prob, size=0.23, stroke = 0, alpha=0.8, shape=15)+ scale_color_gradient2(midpoint = 0.5, low = "blue", mid = "white", high = "red", space = "Lab" ) + ggtitle("(a) Prob(30-year return level > 25 m/s)") + theme(legend.key.size = unit(0.4, "cm"), legend.text = element_text(size = 10), axis.title = element_text(size=10),legend.title = element_text(size=10),title = element_text(size=10))+ annotate("point", x=39.89954,y=29.80415,shape=8,col="black",size=2)
f1
f1 <- ggmap(myMap) + scale_x_continuous(limits = c(min(lon), max(lon)), expand = c(0, 0)) + scale_y_continuous(limits = c(min(lat), max(lat)), expand = c(0, 0)) +
geom_point(aes(x = lon, y = lat, color=prob), data = df_prob, size=0.23, stroke = 0, alpha=0.8, shape=15)+ scale_color_gradient2(midpoint = 0.5, low = "blue", mid = "white", high = "red", space = "Lab" ) + ggtitle("(a) Prob(30-year return level > 25 m/s)") + theme(legend.key.size = unit(0.4, "cm"), legend.text = element_text(size = 10), axis.title = element_text(size=10),legend.title = element_text(size=10),title = element_text(size=10))+ annotate("point", x=39.89954,y=29.80415,shape=8,col="black",size=2)
f1
f1
f2 <- ggmap(myMap) + scale_x_continuous(limits = c(min(lon), max(lon)), expand = c(0, 0)) + scale_y_continuous(limits = c(min(lat), max(lat)), expand = c(0, 0)) +
geom_point(aes(x = lon, y = lat, color=prob), data = df_prob9, size=0.23, stroke = 0, alpha=0.8, shape=15)+ scale_color_gradient2(midpoint = 0.5, low = "blue", mid = "white", high = "red", space = "Lab" ) + ggtitle("(b) Prob(Summer wind speed > 9 m/s)") + theme(legend.key.size = unit(0.4, "cm"), legend.text = element_text(size = 10), axis.title = element_text(size=10),legend.title = element_text(size=10),title = element_text(size=10))+ annotate("point", x=39.89954,y=29.80415,shape=8,col="black",size=2)
f2
f2
ggarrange(f1,f2,ncol=2,align = "hv")
ggpubr::ggarrange(f1,f2,ncol=2,align = "hv")
ggpubr::ggarrange(f1,f2,ncol=2,align = "hv")
24*330
8027-10
View(cell)
cell <- readRDS("Data/cell.dat")
setwd("~/Dropbox/Wanfang's Research/Project 3 Wind Extremes/Dan method/Rcode")
cell <- readRDS("Data/cell.dat")
cell <- readRDS("Data/cell.dat")
exc <- readRDS("Data/exc.dat")
View(cell)
cell[,"cell"] <- 1:dim(cell)[1]
View(cell)
rownames(cell) <- NULL
View(cell)
exc <- readRDS("Data/exc.dat")
dim(exc)
View(exc)
a=sort(exc[,1])
a=rank(exc[,1])
a=order(exc[,1])
head(a)
?order
a=order(exc[,1],method = "radix")
a=order(exc[,1],method = "shell")
?order
order(unique(exc[,1]))
unique(exc[,1])
df = unique(exc[,1])
df = data.frame(idx=1:83981,cell=df)
?merge
merge.data.frame(exc,df)
merge.exc = merge.data.frame(exc,df)
View(merge.exc)
merge.exc = merge.data.frame(df,exc)
exc <- merge.exc[,-1]
colnames(exc)
colnames(exc) <- c("cell","ws")
View(exc)
View(cell)
clst <- cclust(cbind(cell[,"lon"], cell[,"lat"], cell[,"xi"]),
k=200, weights=c(0.2,0.2,0.6), method="hardcl")
clst <- flexclust::cclust(cbind(cell[,"lon"], cell[,"lat"], cell[,"xi"]),
k=200, weights=c(0.2,0.2,0.6), method="hardcl")
kmeans <- clst@cluster
kmeans
nclst <- c()
for (i in 1:200)
{
nclst[i] <- sum(kmeans==i)
}
range(nclst)
cell_KSA <- readRDS(here::here("Wind_140_KSA_200_95/cell.dat"))
xi_mean <- c()
for (i in 1:200) {
x <- cell_KSA[which(kmeans==i),"xi"]
xi_mean[i] <- mean(x)
cell_KSA[which(kmeans==i),"xi"]=rep(xi_mean[i],length(x))
}
xi.df = data.frame(lon = cell_KSA[,"lon"], lat = cell_KSA[,"lat"], shape = cell_KSA[,"xi"])
p200_95 = ggplot(xi.df, aes(x = lon, y = lat)) +
geom_point(aes(colour = shape), size=0.27, stroke = 0, shape=15)+
scale_colour_gradientn(colours = fields::tim.colors(64)) +
coord_map() + ggtitle("(a) Cluster means of shape GMLEs") + theme(legend.key.size = unit(0.4, "cm"), legend.text = element_text(size = 10), axis.title = element_text(size=10),legend.title = element_text(size=10),title = element_text(size=10))
p200_95 = ggplot2::ggplot(xi.df, aes(x = lon, y = lat)) +
geom_point(aes(colour = shape), size=0.27, stroke = 0, shape=15)+
scale_colour_gradientn(colours = fields::tim.colors(64)) +
coord_map() + ggtitle("(a) Cluster means of shape GMLEs") + theme(legend.key.size = unit(0.4, "cm"), legend.text = element_text(size = 10), axis.title = element_text(size=10),legend.title = element_text(size=10),title = element_text(size=10))
library(ggplot2)
p200_95 = ggplot(xi.df, aes(x = lon, y = lat)) +
geom_point(aes(colour = shape), size=0.27, stroke = 0, shape=15)+
scale_colour_gradientn(colours = fields::tim.colors(64)) +
coord_map() + ggtitle("(a) Cluster means of shape GMLEs") + theme(legend.key.size = unit(0.4, "cm"), legend.text = element_text(size = 10), axis.title = element_text(size=10),legend.title = element_text(size=10),title = element_text(size=10))
p200_95
p200_95
dev.off()
dev.off()
p200_95 = ggplot(xi.df, aes(x = lon, y = lat)) +
geom_point(aes(colour = shape), size=0.27, stroke = 0, shape=15)+
scale_colour_gradientn(colours = fields::tim.colors(64)) +
coord_map() + ggtitle("(a) Cluster means of shape GMLEs") + theme(legend.key.size = unit(0.4, "cm"), legend.text = element_text(size = 10), axis.title = element_text(size=10),legend.title = element_text(size=10),title = element_text(size=10))
p200_95
dev.off
dev.off(1)
p200_95
ID <- as.numeric(kmeans)
lon <- as.numeric(cell[,"lon"])
lat <- as.numeric(cell[,"lat"])
cell_df <- data.frame(list(lon=lon, lat=lat, id=factor(ID)),row.names =c())
cell_list <- split(cell_df, cell_df$id)
# only want lon-lats in the list, not the names
cell_list <- lapply(cell_list, function(x) { x["id"] <- NULL; x })
# create SpatialPolygons Object, convert coords to polygon
ps <- lapply(cell_list, Polygon)
# add id variable
p1 <- lapply(seq_along(ps),
function(i) Polygons(list(ps[[i]]),ID = names(cell_list)[i]))
# create SpatialPolygons object
my_spatial_polys <- SpatialPolygons(p1)
my_spatial_polys_df <- SpatialPolygonsDataFrame(my_spatial_polys,
data.frame(id = unique(cell_df$id),
row.names = unique(cell_df$id)))
ID <- as.numeric(kmeans)
lon <- as.numeric(cell[,"lon"])
lat <- as.numeric(cell[,"lat"])
cell_df <- data.frame(list(lon=lon, lat=lat, id=factor(ID)),row.names =c())
cell_list <- split(cell_df, cell_df$id)
# only want lon-lats in the list, not the names
cell_list <- lapply(cell_list, function(x) { x["id"] <- NULL; x })
# create SpatialPolygons Object, convert coords to polygon
ps <- lapply(cell_list, Polygon)
# add id variable
p1 <- lapply(seq_along(ps),
function(i) Polygons(list(ps[[i]]),ID = names(cell_list)[i]))
# create SpatialPolygons object
my_spatial_polys <- SpatialPolygons(p1)
my_spatial_polys_df <- SpatialPolygonsDataFrame(my_spatial_polys,
data.frame(id = unique(cell_df$id),
row.names = unique(cell_df$id)))
# build a neighbours list based on regions with contiguous boundaries
neighbor <- spdep::poly2nb(my_spatial_polys_df, snap=0.045, queen = FALSE)
?Polygon
library(sp)
?SpatialPolygonsDataFrame
ID <- as.numeric(kmeans)
lon <- as.numeric(cell[,"lon"])
lat <- as.numeric(cell[,"lat"])
cell_df <- data.frame(list(lon=lon, lat=lat, id=factor(ID)),row.names =c())
cell_list <- split(cell_df, cell_df$id)
# only want lon-lats in the list, not the names
cell_list <- lapply(cell_list, function(x) { x["id"] <- NULL; x })
# create SpatialPolygons Object, convert coords to polygon
ps <- lapply(cell_list, Polygon)
# add id variable
p1 <- lapply(seq_along(ps),
function(i) Polygons(list(ps[[i]]),ID = names(cell_list)[i]))
# create SpatialPolygons object
my_spatial_polys <- SpatialPolygons(p1)
my_spatial_polys_df <- SpatialPolygonsDataFrame(my_spatial_polys,
data.frame(id = unique(cell_df$id),
row.names = unique(cell_df$id)))
# build a neighbours list based on regions with contiguous boundaries
neighbor <- spdep::poly2nb(my_spatial_polys_df, snap=0.045, queen = FALSE)
for (i in 1:200) {
look <- which(kmeans%in%c(i,neighbor[[i]]))
ind <- as.numeric(names(kmeans[look]))
cell_look <- cell[look,]
exc_look <- exc[exc[,"cell"]%in%ind,]
# create the adjacency matrix
sep <- 0.045  # rounded distance of adjacent locations
d <- as.matrix(dist(cbind(cell_look[,"lon"], cell_look[,"lat"])))
adj_look <- ifelse(round(d,4)==sep,1,0)
# exclude isolated grid cells
no_nei <- which(apply(adj_look,1,sum)==0)
if (length(no_nei)>0) {
adj_look <- adj_look[-no_nei,-no_nei]
cell_look <- cell_look[-no_nei,]
exc_look <- exc[exc[,"cell"]%in%cell_look[,"cell"],]
}
saveRDS(cell_look,paste0("Cluster_neighbors", i, "/cell.dat"))
saveRDS(exc_look,paste0("Cluster_neighbors/", i, "/exc.dat"))
saveRDS(adj_look,paste0("Cluster_neighbors/", i, "/ADJ.dat"))
}
here::here()
setwd("~/Dropbox/Wanfang's Research/Project 3 Wind Extremes/Dan method/Rcode")
for (i in 1:200) {
look <- which(kmeans%in%c(i,neighbor[[i]]))
ind <- as.numeric(names(kmeans[look]))
cell_look <- cell[look,]
exc_look <- exc[exc[,"cell"]%in%ind,]
# create the adjacency matrix
sep <- 0.045  # rounded distance of adjacent locations
d <- as.matrix(dist(cbind(cell_look[,"lon"], cell_look[,"lat"])))
adj_look <- ifelse(round(d,4)==sep,1,0)
# exclude isolated grid cells
no_nei <- which(apply(adj_look,1,sum)==0)
if (length(no_nei)>0) {
adj_look <- adj_look[-no_nei,-no_nei]
cell_look <- cell_look[-no_nei,]
exc_look <- exc[exc[,"cell"]%in%cell_look[,"cell"],]
}
saveRDS(cell_look,paste0("Cluster_neighbors", i, "/cell.dat"))
saveRDS(exc_look,paste0("Cluster_neighbors/", i, "/exc.dat"))
saveRDS(adj_look,paste0("Cluster_neighbors/", i, "/ADJ.dat"))
}
# create datasets for cluster neighbors
for (i in 1:200) {
look <- which(kmeans%in%c(i,neighbor[[i]]))
ind <- as.numeric(names(kmeans[look]))
cell_look <- cell[look,]
exc_look <- exc[exc[,"cell"]%in%ind,]
# create the adjacency matrix
sep <- 0.045  # rounded distance of adjacent locations
d <- as.matrix(dist(cbind(cell_look[,"lon"], cell_look[,"lat"])))
adj_look <- ifelse(round(d,4)==sep,1,0)
# exclude isolated grid cells
no_nei <- which(apply(adj_look,1,sum)==0)
if (length(no_nei)>0) {
adj_look <- adj_look[-no_nei,-no_nei]
cell_look <- cell_look[-no_nei,]
exc_look <- exc[exc[,"cell"]%in%cell_look[,"cell"],]
}
saveRDS(cell_look,paste0("Cluster_neighbors/", i, "/cell.dat"))
saveRDS(exc_look,paste0("Cluster_neighbors/", i, "/exc.dat"))
saveRDS(adj_look,paste0("Cluster_neighbors/", i, "/ADJ.dat"))
}
for (i in 1:200) {
look <- which(kmeans%in%c(i,neighbor[[i]]))
ind <- as.numeric(names(kmeans[look]))
cell_look <- cell[look,]
exc_look <- exc[exc[,"cell"]%in%ind,]
# create the adjacency matrix
sep <- 0.045  # rounded distance of adjacent locations
d <- as.matrix(dist(cbind(cell_look[,"lon"], cell_look[,"lat"])))
adj_look <- ifelse(round(d,4)==sep,1,0)
# exclude isolated grid cells
no_nei <- which(apply(adj_look,1,sum)==0)
if (length(no_nei)>0) {
adj_look <- adj_look[-no_nei,-no_nei]
cell_look <- cell_look[-no_nei,]
exc_look <- exc[exc[,"cell"]%in%cell_look[,"cell"],]
}
saveRDS(cell_look,paste0("Data/Cluster_neighbors/", i, "/cell.dat"))
saveRDS(exc_look,paste0("Data/Cluster_neighbors/", i, "/exc.dat"))
saveRDS(adj_look,paste0("Data/Cluster_neighbors/", i, "/ADJ.dat"))
}
saveRDS(cell, "Data/cell.dat")
saveRDS(exc, "Data/exc.dat")
i=1
source("Functions/primer.R")  #reads in data and sets up objects to store output
primer(paste0("Data/Cluster_neighbors/", i))
source("Functions/sourcePrograms.R")
source("Functions/primer.R")  #reads in data and sets up objects to store output
primer(paste0("Data/Cluster_neighbors/", i))
source("Functions/sourcePrograms.R")
niter <- 10  # number of iterations
result_look <- driver(niter, covariates = c("clon","clat","celev"))  #runs niter steps of MCMC
saveRDS(kmeans,"Data/kmeans.dat")
result_KSA <- readRDS("Results.rda")
result_KSA <- readRDS("Results.dat")
pars <- result_KSA[[1]]
for (k in 2:200)
pars <- rbind(pars, result_KSA[[k]])
exc <- readRDS("Data/exc.dat")
cell <- readRDS("Data/cell.dat")
excWS <- exc[,"ws"]
nExc <- cell[,"nExc"]
mu <- pars[,2]
sig <- exp(pars[,3])
xi <- pars[,4]
muXP <- rep(mu, nExc)
sigXP <- rep(sig, nExc)
xiXP <- rep(xi, nExc)
thold <- cell[,"thold"]
nObs  <- cell[,"nObs"]
npy   <- cell[,"npy"]
logLhood1 <- sum(-6 * (1 + xi/sig*(thold - mu))[which((1 + xi/sig*(thold - mu))>0)]^(-1/xi)[which((1 + xi/sig*(thold - mu))>0)]  - nExc[which((1 + xi/sig*(thold - mu))>0)]*log(sig)[which((1 + xi/sig*(thold - mu))>0)])
logLhood2 <- -(sum((1+1/xiXP)[which(1 + xiXP/sigXP*(excWS - muXP)>0)]*log((1 + xiXP/sigXP*(excWS - muXP))[which(1 + xiXP/sigXP*(excWS - muXP)>0)])))
d <- -2*(logLhood1 + logLhood2)
DIC <- (2*sum(unique(pars[,10])) - d)/83981
DIC
d
View(pars)
result_KSA <- readRDS("Results.dat")
pars <- result_KSA[[1]]
for (k in 2:200)
pars <- rbind(pars, result_KSA[[k]])
cell <- readRDS("Data/cell.dat")
exc <- readRDS("Data/exc.dat")
source("Functions/primer.R")  #reads in data and sets up objects to store output
primer(paste0("Data/Cluster_neighbors/", i))
i=1
primer(paste0("Data/Cluster_neighbors/", i))
source("Functions/sourcePrograms.R")
niter <- 10  # number of iterations
niter <- 100  # number of iterations
result_look <- driver(niter, covariates = c("clon","clat","celev"))  #runs niter steps of MCMC
kmeans <- readRDS("Data/kmeans.dat")
head(kmeans)
look <- which(kmeans==i)  # retain results only in central cluster
ind <- as.numeric(names(kmeans[look]))
ind <- kmeans[look]
ind
look
kmeans <- readRDS("Data/kmeans.dat")
keep <- which(kmeans==i)  # retain results only in central cluster
n <- dim(result_look$muRecord)[1]
mu_out <- result_look$muRecord[(n/2+1):n, keep]
dim(result_look$muRecord)
keep <- which(cell[,"cell"]%in%look)
keep
n <- dim(result_look$muRecord)[1]
mu_out <- result_look$muRecord[(n/2+1):n, keep]
lsig_out <- log(result_look$sigRecord[(n/2+1):n, keep])
xi_out <- result_look$xiRecord[(n/2+1):n, keep]
deviance <- mean(result_look$deviance[(n/2+1):n])
p <- 30  # return period
ret30 <- mu_out + exp(lsig_out)/xi_out*((-log(1-1/(p)))^(-xi_out)-1)
prob30 <- apply(ret30, 2, function(x) ifelse(sum(x>25)>0, sum(x>25)/dim(ret30)[1], NA))
result <- cbind(ind, apply(mu_out,2,mean), apply(lsig_out,2,mean),
apply(xi_out,2,mean), apply(ret30,2,mean),
apply(ret30,2,quantile,probs=0.50),
apply(ret30,2,quantile,probs=0.05),
apply(ret30,2,quantile,probs=0.95),
prob30,rep(deviance,length(ind)))
colnames(result) <- c("cell","mu_pmean","lsig_pmean","xi_pmean","ret30_pmean",
"ret30_50q","ret30_5q","ret30_95q", "prob30", "deviance")
result
View(result)
result <- cbind(look, apply(mu_out,2,mean), apply(lsig_out,2,mean),
apply(xi_out,2,mean), apply(ret30,2,mean),
apply(ret30,2,quantile,probs=0.50),
apply(ret30,2,quantile,probs=0.05),
apply(ret30,2,quantile,probs=0.95),
prob30,rep(deviance,length(ind)))
View(result)
colnames(result) <- c("cell","mu_pmean","lsig_pmean","xi_pmean","ret30_pmean",
"ret30_50q","ret30_5q","ret30_95q", "prob30", "deviance")
View(result)
source("Functions/primer.R")  #reads in data and sets up objects to store output
primer(paste0("Data/Cluster_neighbors/", i))
source("Functions/sourcePrograms.R")
i=1
primer(paste0("Data/Cluster_neighbors/", i))
niter <- 100  # number of iterations
result_look <- driver(niter, covariates = c("clon","clat","celev"))  #runs niter steps of MCMC
kmeans <- readRDS("Data/kmeans.dat")
ind <- which(kmeans==i)  # retain results only in central cluster
keep <- which(cell[,"cell"]%in%ind)
n <- dim(result_look$muRecord)[1]
mu_out <- result_look$muRecord[(n/2+1):n, keep]
lsig_out <- log(result_look$sigRecord[(n/2+1):n, keep])
xi_out <- result_look$xiRecord[(n/2+1):n, keep]
deviance <- mean(result_look$deviance[(n/2+1):n])
p <- 30  # return period
ret30 <- mu_out + exp(lsig_out)/xi_out*((-log(1-1/(p)))^(-xi_out)-1)
prob30 <- apply(ret30, 2, function(x) ifelse(sum(x>25)>0, sum(x>25)/dim(ret30)[1], NA))
result <- cbind(ind, apply(mu_out,2,mean), apply(lsig_out,2,mean),
apply(xi_out,2,mean), apply(ret30,2,mean),
apply(ret30,2,quantile,probs=0.50),
apply(ret30,2,quantile,probs=0.05),
apply(ret30,2,quantile,probs=0.95),
prob30,rep(deviance,length(ind)))
View(result)
colnames(result) <- c("cell","mu_pmean","lsig_pmean","xi_pmean","ret30_pmean",
"ret30_50q","ret30_5q","ret30_95q", "prob30", "deviance")
View(result)
?fpot
library(evd)
?fpot
evd::plot
install.packages("evir")
library(evir)
cell <- readRDS("Data/cell.dat")
exc <- readRDS("Data/exc.dat")
cell <- readRDS("Data/cell.dat")
cell <- readRDS("Rcode/Data/cell.dat")
exc <- readRDS("Rcode/Data/exc.dat")
excList_selected <- list()
loc <- sample(1:83981,6,replace = FALSE)
loc
for (i in 1:length(loc)) {
excList_selected[[i]] <- as.vector(exc[exc[,1] == cell[loc[i], "cell"], "ws"])
}
?evir
?qplot
i=1
qplot(excList_selected[[i]], xi = cell[loc[i],"xi"], threshold = cell[loc[i],"threshold"])
View(cell)
qplot(excList_selected[[i]], xi = cell[loc[i],"xi"], threshold = cell[loc[i],"thold"])
qplot(excList_selected[[i]], xi = cell[loc[i],"xi"], threshold = cell[loc[i],"thold"])
dev.off()
